package View;import Server.Configurations;import ViewModel.MyViewModel;import algorithms.mazeGenerators.IMazeGenerator;import algorithms.search.ISearchingAlgorithm;import javafx.event.ActionEvent;import javafx.fxml.Initializable;import javafx.scene.control.*;import java.net.URL;import java.util.ResourceBundle;/** * PropertiesController - controller of properties stage */public class PropertiesController implements Initializable {    public ChoiceBox generatorChoiceBox; //ChoiceBox for generator algorithm    public ChoiceBox AlgorithmChoiceBox;  //ChoiceBox for searching algorithm    public Spinner<Integer> spinner;  //spinner for thread number field    public int TreadsNumber;    public Button OK_btn; //after pressing this button -> configuration will be updated    SpinnerValueFactory<Integer> spinnerValueFactory;    private MyViewModel viewModel = MyViewModel.getInstance();    @Override    public void initialize(URL url, ResourceBundle resourceBundle) {        generatorChoiceBox.getItems().addAll("EmptyMazeGenerator", "SimpleMazeGenerator", "MyMazeGenerator"); //fill ChoiceBox with the options        AlgorithmChoiceBox.getItems().addAll("DepthFirstSearch", "BreadthFirstSearch", "BestFirstSearch");        //ChoiceBox value = the current configuration        IMazeGenerator generator = Configurations.getGeneratingAlgorithm();        String genStr = catString(generator.getClass().toString());        generatorChoiceBox.setValue(genStr);        ISearchingAlgorithm searcher = Configurations.getSearchingAlgorithm();        String serStr = catString(searcher.getClass().toString());        AlgorithmChoiceBox.setValue(serStr);        //spinner value = the current configuration        TreadsNumber = Configurations.getThreadsNumber();        spinnerValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(1,100,TreadsNumber);        spinner.setValueFactory(spinnerValueFactory);    }    //change the current configuration    public void changeConfiguration(ActionEvent actionEvent) {        String newGenerator = (String) generatorChoiceBox.getValue(); //find user choices        String newAlgorithm = (String) AlgorithmChoiceBox.getValue();        Integer newThreadsNumber = spinner.getValue();        if(newThreadsNumber != Configurations.getThreadsNumber()){ //if user changed the treads number            viewModel.exitGame(); //shut down servers, update threads number, and init servers again            Configurations.setThreadPoolSize(String.valueOf(newThreadsNumber));            viewModel.initGameServers();        }        String genStr = catString(Configurations.getGeneratingAlgorithm().getClass().toString());        String serStr = catString(Configurations.getSearchingAlgorithm().getClass().toString());        if(!newGenerator.equals(genStr)){ //if user changed the generator algorithm            Configurations.setGenerator(newGenerator);            Alert alert = new Alert(Alert.AlertType.INFORMATION);            alert.setTitle("");            alert.setContentText("If you want to create a new maze problem, by using the \ngenerator algorithm you choose, press again: \"Generate Maze\" \nor File -> New.");            alert.show();        }        else if(!newAlgorithm.equals(serStr) ){ //if user changed the searcher algorithm            Configurations.setSearchingAlgorithm(newAlgorithm);        }        actionEvent.consume();    }    //clean string from unnecessary parts    private String catString(String str){        int i = str.indexOf(".");        str = str.substring(i+1);        i = str.indexOf(".");        return str.substring(i+1);    }}